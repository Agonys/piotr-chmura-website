{"version":3,"sources":["components/Modal/Modal.js"],"names":["StyledButton","styled","Button","StyledHr","hr","theme","colors","black","StyledImage","div","src","StyledLine","special","ModalContainer","isOpen","grey","transitions","ease","devices","tablet","laptop","DescriptionContainer","TitleContainer","mobileL","laptopM","IconContainer","ButtonContainer","CloseModal","white","DarkOverlay","Modal","iconsList","isModalOpen","modalData","closeModal","title","description","icons","sourceCode","preview","backgroundImage","map","icon","index","key","alt","href","target","rel","isInverted","onClick","defaultProps"],"mappings":"wvGAMA,IAAMA,EAAeC,YAAOC,IAAPD,CAAH,KAQZE,EAAWF,IAAOG,GAAV,KAES,qBAAGC,MAAkBC,OAAOC,SAG7CC,EAAcP,IAAOQ,IAAV,KACU,qBAAGC,OAOxBC,EAAaV,IAAOQ,IAAV,KAGO,qBAAGJ,MAAkBC,OAAOM,WAG7CC,EAAiBZ,IAAOQ,IAAV,KACP,qBAAGK,OAAsB,QAAU,OAKlC,cAAGA,OAAH,OAAyB,MACvB,qBAAGA,OAAsB,WAAa,gBACxC,qBAAGA,OAAsB,EAAI,KACpB,qBAAGT,MAAkBC,OAAOS,QAClC,qBAAGV,MAAkBW,YAAYC,OAEtCC,IAAQC,QACJ,qBAAGL,OAAsB,OAAS,MAGtCI,IAAQE,QASdC,EAAuBpB,IAAOQ,IAAV,KAWpBa,EAAiBrB,IAAOQ,IAAV,IAKLS,IAAQK,QACRL,IAAQC,OAEXD,IAAQM,SAUdC,EAAgBxB,IAAOQ,IAAV,KAWbiB,EAAkBzB,IAAOQ,IAAV,KAUfkB,EAAa1B,IAAOQ,IAAV,KACO,qBAAGJ,MAAkBC,OAAOsB,SAQlC,qBAAGvB,MAAkBW,YAAYC,QAO9B,qBAAGZ,MAAkBW,YAAYC,QAiB/CY,EAAc5B,IAAOQ,IAAV,IASLS,IAAQC,QACH,qBAAGL,OAAsB,QAAU,QAI9CgB,EAAQ,SAAC,GAA4C,IAGpDC,EAHUC,EAAyC,EAAzCA,YAAaC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,WAAiB,iBACyBD,GAAxEE,EAD+C,EAC/CA,MAAOC,EADwC,EACxCA,YAAaC,EAD2B,EAC3BA,MAAOC,EADoB,EACpBA,WAAYC,EADQ,EACRA,QAASC,EADD,EACCA,gBASxD,OANGH,IACAN,EAAYM,EAAMI,KAAI,SAACC,EAAMC,GAC1B,OAAO,yBAAKC,IAAKD,EAAOjC,IAAKgC,EAAMG,IAAI,aAK1C,oCACA,kBAAChC,EAAD,CAAgBC,OAAQkB,GACrB,kBAACxB,EAAD,CAAaE,IAAK8B,IAClB,kBAAC7B,EAAD,MAEA,kBAACU,EAAD,KACG,kBAACC,EAAD,KACG,8BAAOa,GACP,kBAACV,EAAD,KAAgBM,IAGnB,kBAAC5B,EAAD,MAEA,2BAAIiC,GACJ,kBAACV,EAAD,KACIY,GAAc,uBAAGQ,KAAMR,EAAYS,OAAO,SAASC,IAAI,uBAAsB,kBAAChD,EAAD,CAAciD,YAAU,GAAxB,8BAC7EV,GAAW,uBAAGO,KAAMP,EAASQ,OAAO,SAASC,IAAI,uBAAsB,kBAAChD,EAAD,uBAG3E,kBAAC2B,EAAD,CAAYuB,QAAShB,GAClB,8BACA,iCAKT,kBAACL,EAAD,CAAaf,OAAQkB,MAI3BF,EAAMqB,aAAe,CAClBnB,aAAa,EACbC,UAAW,CACRE,MAAO,sBACPC,YAAa,gBACbI,gBAAiB,KAmBRV","file":"static/js/3.d3fe9a3f.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from 'components/Buttons/ButtonFull';\r\nimport { devices } from 'theme';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst StyledButton = styled(Button)`\r\n   max-width: 160px;\r\n   padding: 10px 10px;\r\n   margin: 0px;\r\n   width: 150px;\r\n   font-size: 1.5rem;\r\n`;\r\n\r\nconst StyledHr = styled.hr`\r\n   width: 100%;\r\n   border: 1px solid ${({ theme }) => theme.colors.black};\r\n`;\r\n\r\nconst StyledImage = styled.div`\r\n   background-image: url(${({ src }) => src});\r\n   background-position: center top;\r\n   background-size: cover;\r\n   width: 100%;\r\n   height: 250px;\r\n`;\r\n\r\nconst StyledLine = styled.div`\r\n   width: 100%;\r\n   height: 4px;\r\n   background-color: ${({ theme }) => theme.colors.special};\r\n`;\r\n\r\nconst ModalContainer = styled.div`\r\n   height: ${({ isOpen }) => isOpen ? \"100vh\" : \"0\"};\r\n   width: 100%;\r\n   position: fixed;\r\n   overflow: hidden;\r\n   top: 0;\r\n   z-index: ${({ isOpen }) => isOpen ? 12 : 12};\r\n   transform: ${({ isOpen }) => isOpen ? 'scale(1)' : 'scale(0.8)'};\r\n   opacity: ${({ isOpen }) => isOpen ? 1 : 0};\r\n   background-color: ${({ theme }) => theme.colors.grey};\r\n   transition: ${({ theme }) => theme.transitions.ease};\r\n\r\n   @media ${devices.tablet} {\r\n      height: ${({ isOpen }) => isOpen ? \"auto\" : \"0\"};\r\n   }\r\n\r\n   @media ${devices.laptop} {\r\n      max-width: 700px;\r\n      left: 0;\r\n      right: 0;\r\n      margin: 0 auto;\r\n      top: 40px;\r\n   }\r\n`;\r\n\r\nconst DescriptionContainer = styled.div`\r\n   display: flex;\r\n   flex-direction: column;\r\n   align-items: center;\r\n   padding: 20px;\r\n   p {\r\n      margin-top: 15px;\r\n      font-size: 1.6rem;\r\n   }\r\n`;\r\n\r\nconst TitleContainer = styled.div`\r\n   text-align: center;\r\n   span {\r\n      font-size: 2rem;\r\n      font-weight: 600;\r\n      @media ${devices.mobileL} { font-size: 2.4rem }\r\n      @media ${devices.tablet} { font-size: 2.8rem }\r\n   }\r\n   @media ${devices.laptopM} {\r\n      width: 100%;\r\n      display: flex;\r\n      flex-direction: row;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      div { margin-right: 0 }\r\n   }\r\n`;\r\n\r\nconst IconContainer = styled.div`\r\n   display: flex;\r\n   width: max-content;\r\n   margin: 10px auto;\r\n   img {\r\n      width: 48px;\r\n      height: 48px;\r\n      margin: 0 8px;\r\n   }\r\n`;\r\n\r\nconst ButtonContainer = styled.div`\r\n   display: flex;\r\n   width: 100%;\r\n   justify-content: center;\r\n   margin: 30px 0;\r\n   a {\r\n      margin: 0 10px;\r\n   }\r\n`;\r\n\r\nconst CloseModal = styled.div`\r\n   border: 1px solid ${({ theme }) => theme.colors.white};\r\n   border-radius: 50%;\r\n   width: 56px;\r\n   height: 56px;\r\n   cursor: pointer;\r\n   display: flex;\r\n   justify-content: center;\r\n   flex-flow: column nowrap;\r\n   transition: ${({ theme }) => theme.transitions.ease};\r\n   div {\r\n      width: 40px;\r\n      height: 4px;\r\n      background-color: white;\r\n      transform-origin: 17px;\r\n      align-self: center;\r\n      transition: ${({ theme }) => theme.transitions.ease};\r\n      border-radius: 5px;\r\n      &:first-of-type {\r\n         transform: rotate(45deg);\r\n      }\r\n      &:last-of-type {\r\n         transform: rotate(-45deg);\r\n      }\r\n   }\r\n   &:hover {\r\n      background-color: white;\r\n      div {\r\n         background-color: black;\r\n      }\r\n   }\r\n`;\r\n\r\nconst DarkOverlay = styled.div`\r\n   position: fixed;\r\n   top: 0;\r\n   left: 0;\r\n   width: 100vw;\r\n   height: 100vh;\r\n   background-color: rgba(0, 0, 0, 0.6);\r\n   display: none;\r\n   z-index: 10;\r\n   @media ${devices.tablet} {\r\n      display: ${({ isOpen }) => isOpen ? 'block' : null};\r\n   }\r\n`;\r\n\r\nconst Modal = ({ isModalOpen, modalData, closeModal }) => {\r\n   const { title, description, icons, sourceCode, preview, backgroundImage } = {...modalData};\r\n\r\n   let iconsList;\r\n   if(icons) {\r\n      iconsList = icons.map((icon, index) => {\r\n         return <img key={index} src={icon} alt=\"icon\" />\r\n      });\r\n   }\r\n\r\n   return (\r\n      <>\r\n      <ModalContainer isOpen={isModalOpen}>\r\n         <StyledImage src={backgroundImage} />\r\n         <StyledLine />\r\n\r\n         <DescriptionContainer>\r\n            <TitleContainer>\r\n               <span>{title}</span>\r\n               <IconContainer>{iconsList}</IconContainer>\r\n            </TitleContainer>\r\n\r\n            <StyledHr />\r\n\r\n            <p>{description}</p>\r\n            <ButtonContainer>\r\n               {sourceCode && <a href={sourceCode} target=\"_blank\" rel=\"noopener noreferrer\"><StyledButton isInverted>Kod źródłowy</StyledButton></a>}\r\n               {preview && <a href={preview} target=\"_blank\" rel=\"noopener noreferrer\"><StyledButton>podgląd</StyledButton></a>}\r\n            </ButtonContainer>\r\n\r\n            <CloseModal onClick={closeModal}>\r\n               <div />\r\n               <div />\r\n            </CloseModal>\r\n         </DescriptionContainer>\r\n\r\n      </ModalContainer>\r\n      <DarkOverlay isOpen={isModalOpen} />\r\n      </>\r\n   )\r\n}\r\nModal.defaultProps = {\r\n   isModalOpen: false,\r\n   modalData: {\r\n      title: \"Tytuł projektu\",\r\n      description: \"Opis projektu\",\r\n      backgroundImage: \"\",\r\n   }\r\n}\r\n\r\nModal.propTypes = {\r\n   isModalOpen: PropTypes.bool.isRequired,\r\n\r\n   modalData: PropTypes.shape({\r\n      title: PropTypes.string.isRequired,\r\n      description: PropTypes.string.isRequired,\r\n      icons: PropTypes.array,\r\n      sourceCode: PropTypes.string,\r\n      preview: PropTypes.string,\r\n      backgroundImage: PropTypes.string.isRequired,\r\n   }).isRequired,\r\n\r\n   closeModal: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Modal;\r\n"],"sourceRoot":""}